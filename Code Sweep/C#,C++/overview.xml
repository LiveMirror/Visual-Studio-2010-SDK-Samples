<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../../../../Common/Overview.xsl" type="text/xsl"?>
<VSSDKSample>
  <ImagePath>../../../../Common</ImagePath>
  <Status>
    <Accessibility>true</Accessibility>
    <ArchitectureDiagram>true</ArchitectureDiagram>
    <Comments>true</Comments>
    <Documentation>true</Documentation>
    <ErrorHandling>true</ErrorHandling>
    <FollowSDKCodingStandards>true</FollowSDKCodingStandards>
    <Localizable>true</Localizable>
    <Overview>true</Overview>
    <ScenarioTests>true</ScenarioTests>
    <Supported>true</Supported>
    <UnitTests>true</UnitTests>
    <Style>Example</Style>
  </Status>
  <Overview>
    <ShortName>C# Example.CodeSweep</ShortName>
    <LongName>CodeSweep</LongName>
    <Phrase>Scans project files for sensitive terms.</Phrase>
  </Overview>
  <Introduction>
    <Summary>
      This sample allows the user to specify a set of terms to search for by specifying a set of
      XML files containing the term definitions. The user-configurable settings are stored in the
      project file. The scan can be invoked either on command or as an integrated part of the
      build process. When the scan is performed, a custom task provider causes hits, if any, to be shown in the task list.
    </Summary>
    <Goal>Demonstrates writing MSBuild tasks, which run as part of the build.</Goal>
    <Goal>Demonstrates using a host object to communicate with MSBuild tasks from within the integrated development environment (IDE).</Goal>
    <Goal>Shows how to store and retrieve information in both MSBuild projects and non-MSBuild projects.</Goal>
    <Goal>Shows how to implement a custom task provider, including a custom toolbar and shortcut menu.</Goal>
    <Goal>Demonstrates how to place commands on the Project menu and the Solution Explorer shortcut menu, and how to handle them.</Goal>
    <Goal>Includes an algorithm to search for multiple terms across multiple streams of characters.</Goal>
    <Image width="400" height="400">CodeSweep.jpg</Image>
  </Introduction>
  <SampleInfo>
    <State>true</State>
    <Type>Example</Type>
    <Complexity>2</Complexity>
    <Screenshot>CodeSweep.jpg</Screenshot>
    <Area>IDE</Area>
    <Language>C#</Language>
    <Folder>VisualStudioIntegration\Samples\IDE\CSharp\Example.CodeSweep\</Folder>
    <SampleSolution>CodeSweep.sln</SampleSolution>
    <FolderUnitTest>VisualStudioIntegration\Samples\IDE\CSharp\Example.CodeSweep\TDD\</FolderUnitTest>
    <UnitTestStartup>UnitTests.sln</UnitTestStartup>
    <Doc />
    <Keywords>
      <Keyword>MSBuild</Keyword>
      <Keyword>Task</Keyword>
      <Keyword>MSBuild Tasks</Keyword>
      <Keyword>custom task provider</Keyword>
      <Keyword>context menu</Keyword>
      <Keyword>custom toolbar</Keyword>
      <Keyword>Solution Explorer context menu</Keyword>
      <Keyword>MSBuild-based project</Keyword>
      <Keyword>non-MSBuild project</Keyword>
    </Keywords>
  </SampleInfo>
  <GettingStarted>
    <Paragraph>
      This sample is divided into several projects:
    </Paragraph>
    <Paragraph>
      1. Scanner: class library that implements the scanning functionality.
    </Paragraph>
    <Paragraph>
      2. BuildTask: MSBuild task implementation that allows the scan to run as part of the build
      process.
    </Paragraph>
    <Paragraph>
      3. VsPackage: Visual Studio Package (VSPackage) implementation that provides a UI for the scanning
      functionality.
    </Paragraph>
    <Paragraph>
      4. VsPackageUI: resource definitions for the native satellite DLL used by VsPackage.
    </Paragraph>
    <Paragraph>
      5. Utilities: generally useful utility functions used by other projects in the solution.
    </Paragraph>
    <Paragraph>
      6. Setup: builds a MSI module which can be used to install CodeSweep on any computer with Visual Studio 
      2005.
    </Paragraph>
    <Paragraph>
      7. DevenvSetupCustomAction: builds a custom action executable used by the setup project that
      runs "devenv.exe /setup" to merge the new menu items defined by CodeSweep into the
      Visual Studio menu structure.
    </Paragraph>
    <Paragraph>
      Additionally, there is a second solution (TDD\TDD.sln) that contains the unit
      tests written for CodeSweep.
    </Paragraph>
    <Paragraph>
      The terms to search for are defined in XML files. For an example of the supported format, see
      VsPackage\sample_term_table.xml.  A term may have zero or more "exclusions", which define
      contexts in which it will not count as a hit.  The list of term tables to use is specified on
      a per-project basis, and can be configured in the dialog box invoked by the CodeSweep command (on
      the Project menu or Solution Explorer shortcut menu).
    </Paragraph>
    <Paragraph>
      Only files with supported extensions can be scanned; others are ignored.  This restriction
      exists so that large binary files can be avoided if desired.  The default list of supported
      extensions is found in extensions.xml, which is copied to the user's Application Data\Microsoft\CodeSweep
      folder on first run.  To support new extensions, add them to that file.
    </Paragraph>
    <Paragraph>
      A scan can be invoked either by MSBuild during the build process, or explicitly
      by the user at any time.  In either case - to invoke explicitly or to control invocation during builds - use the configuration dialog box.  If the scan is enabled to run during
      the build, it will be run in command-line builds as well as builds in the IDE.
    </Paragraph>
    <Paragraph>
      When a scan is performed, the results are sent to the Task List.  To see them, click CodeSweep in the
      provider drop-down list on the Task List toolbar.  In the list of results, you can double-click  a result to go to its location.  The CodeSweep Task List toolbar contains four buttons: Stop Scan,
      Repeat Last Scan, Ignore, and Show Ignored Instances.  The Ignore command marks the selected
      result(s) as ignored, which means that they will not be shown in the Task List (even in
      future scans).  To see the ignored instances, click the Show Ignored Instances button.  The
      shortcut menu also contains these commands.
    </Paragraph>
  </GettingStarted>
  <BuildingTheSample>
    <Step>
      Open the CodeSweep.sln solution.
	</Step>
    <Step>
      Press F5 to build the sample, register it in the experimental instance, and launch Visual Studio from the experimental instance.
    </Step>
  </BuildingTheSample>
  <AdditionalResources>
    <Resource>
      <Title>Visual Studio SDK Website</Title>
      <URL>http://msdn.microsoft.com/vstudio/extend</URL>
    </Resource>
  </AdditionalResources>
  <UnitTests>
    <Test>
      <Title>BackgroundScannerTest.*</Title>
      <Description>
        Tests stopping, starting, and repeating scans using CodeSweep.VsPackage.BackgroundScanner.
        Also ensures that the Task List and Status Bar are updated correctly during a scan.
      </Description>
    </Test>
    <Test>
      <Title>BuildManagerTest.*</Title>
      <Description>
        Tests the getting and setting of properties, creation of the build task, and response to build events
        using CodeSweep.VsPackage.BuildManager.
      </Description>
    </Test>
    <Test>
      <Title>IgnoreInstanceTest.*</Title>
      <Description>
        Tests creation, serialization, and deserialization of CodeSweep.VsPackage.IgnoreInstance
        objects.
      </Description>
    </Test>
    <Test>
      <Title>MatchFinderTest.*</Title>
      <Description>
        Tests scanning character streams with different combinations of terms and exclusions
        in different positions.  This verifies the correctness of the core search implementation.
      </Description>
    </Test>
    <Test>
      <Title>NonMSBuildProjectConfigStoreTest.*</Title>
      <Description>
        Tests getting and setting the configuration in a project system that does not support
        MSBuild.
      </Description>
    </Test>
    <Test>
      <Title>Scanner_FactoryTest.*</Title>
      <Description>
        Tests the functionality of CodeSweep.Scanner.Factory, especially the GetTermTable method,
        with different inputs, both valid and invalid.
      </Description>
    </Test>
    <Test>
      <Title>ScannerHostTest.*</Title>
      <Description>
        Tests the operation of the IScannerHost implementation in VsPackage.
      </Description>
    </Test>
    <Test>
      <Title>ScannerTaskTest.*</Title>
      <Description>
        Tests setting and getting the properties of the CodeSweep.BuildTask.ScannerTask class, as
        well as executing the task.
      </Description>
    </Test>
    <Test>
      <Title>ScannerTest.*</Title>
      <Description>
        Tests invocation of the scanner with different inputs, such as files with different extensions,
        invalid file paths, and the like.
      </Description>
    </Test>
    <Test>
      <Title>TaskProviderTest.*</Title>
      <Description>
        Tests adding content to the task provider and getting various properties.
      </Description>
    </Test>
    <Test>
      <Title>TaskTest.*</Title>
      <Description>
        Tests getting and setting (where appropriate) various properties of CodeSweep.VsPackage.Task.
      </Description>
    </Test>
  </UnitTests>
  <FunctionalTests>
    <Test>
      <Title>Build</Title>
      <Description>Verify sample builds in All Configurations.</Description>
    </Test>
  </FunctionalTests>
  <ProjectFiles>
    <File>
      <Name>BuildTask\IScannerHost.cs</Name>
      <Description>The interface that should be implemented by a host object for this task.</Description>
    </File>
    <File>
      <Name>BuildTask\ScannerTask.cs</Name>
      <Description>The MSBuild task implementation.  This derives from Microsoft.Build.Utilities.Task.</Description>
    </File>
    <File>
      <Name>DevenvSetupCustomAction\Program.cs</Name>
      <Description>
        Finds devenv.exe and runs it with the "/setup" argument.
      </Description>
    </File>
    <File>
      <Name>TDD\Mocks\*.cs</Name>
      <Description>
        Mock objects used by the CodeSweep unit tests.  These are mostly skeleton implementations of
        VS interfaces, with the minimum required functionality to allow the tests to function.
        Additional functionality may be added as needed in the future.
      </Description>
    </File>
    <File>
      <Name>TDD\*.cs</Name>
      <Description>
        Unit tests for CodeSweep.  See the "Unit Tests" section of this document for details.
      </Description>
    </File>
    <File>
      <Name>Scanner\IExclusion.cs</Name>
      <Description>The interface for an exclusion, which defines a context in which a specific search term will be ignored.</Description>
    </File>
    <File>
      <Name>Scanner\Exclusion.cs</Name>
      <Description>An IExclusion implementation.</Description>
    </File>
    <File>
      <Name>Scanner\IMultiFileScanResult.cs</Name>
      <Description>The interface for a collection of scan results from a scan over multiple files.</Description>
    </File>
    <File>
      <Name>Scanner\MultiFileScanResult.cs</Name>
      <Description>An IMultiFileScanResult implementation.</Description>
    </File>
    <File>
      <Name>Scanner\IScanHit.cs</Name>
      <Description>The interface for a single instance of a search term found in a scanned file.</Description>
    </File>
    <File>
      <Name>Scanner\ScanHit.cs</Name>
      <Description>An IScanHit implementation.</Description>
    </File>
    <File>
      <Name>Scanner\IScanner.cs</Name>
      <Description>The interface for an object that can perform the scan and return the results.</Description>
    </File>
    <File>
      <Name>Scanner\Scanner.cs</Name>
      <Description>
        An IScanner implementation.  This reads the content of each file and calls MatchFinder to
        do the actual scanning.  A file is scanned only if ShouldBeScanned returns true; this method
        checks the allowed extensions file to see if the file's extension is listed.  ScanFile calls
        one of two GetScanHits methods, one if we are provided the text of the file from a delegate
        (as in the case of a host object that can extract the text from an active buffer inside the
        IDE), and another if we must read the file from disk.  The text is passed to MatchFinder
        one character at a time, because if the file is being read from disk, it may be too large
        to load and parse in memory.  Reading and parsing one character at a time allows arbitrarily
        large files to be scanned.
        </Description>
    </File>
    <File>
      <Name>Scanner\IScanResult.cs</Name>
      <Description>The interface for the result of a scan over a single file.</Description>
    </File>
    <File>
      <Name>Scanner\ScanResult.cs</Name>
      <Description>An IScanResult implementation.</Description>
    </File>
    <File>
      <Name>Scanner\ISearchTerm.cs</Name>
      <Description>The interface for a term to search for.</Description>
    </File>
    <File>
      <Name>Scanner\SearchTerm.cs</Name>
      <Description>An ISearchTerm implementation.</Description>
    </File>
    <File>
      <Name>Scanner\ITermTable.cs</Name>
      <Description>The interface for a collection of terms to search for.</Description>
    </File>
    <File>
      <Name>Scanner\TermTable.cs</Name>
      <Description>
        An ITermTable implementation.  The constructor attempts to read and parse the term table
        definition from the specified XML file and throws an exception if it fails.
      </Description>
    </File>
    <File>
      <Name>Scanner\MatchFinder.cs</Name>
      <Description>
        Performs the search for terms on a stream of characters.  As each character is processed, 
        a list of partially matched terms and exclusions is updated.  If a term is matched and
        none of its exclusions are matched, the hit is returned, through the callback to
        AnalyzeNextCharacter, after end-of-line has been reached (full line text is
        passed to the callback).  Multi-line terms and exclusions are not currently supported.
        Terms are not allowed to overlap, so a match for one term will invalidate other
        partially matched terms that overlap the same character range.
      </Description>
    </File>
    <File>
      <Name>Scanner\Factory.cs</Name>
      <Description>Static public class that creates IScanner and ITermTable instances.</Description>
    </File>
    <File>
      <Name>Utilities\Globals.cs</Name>
      <Description>Global constants and pseudo-contants.</Description>
    </File>
    <File>
      <Name>Utilities\Utilities.cs</Name>
      <Description>Generally useful utility functions.</Description>
    </File>
    <File>
      <Name>VsPackage\IBackgroundScanner.cs</Name>
      <Description>The interface for scanning operations performed on a background thread.</Description>
    </File>
    <File>
      <Name>VsPackage\BackgroundScanner.cs</Name>
      <Description>
        IBackgroundScanner implementation.  To perform a background scan,  configuration
        information is collected, and then CodeSweep.Scanner.IScanner.Scan is called through an
        asynchronous delegate invocation.  As each file's results are received, through a callback,
        they are published to the Task List.
      </Description>
    </File>
    <File>
      <Name>VsPackage\IBuildManager.cs</Name>
      <Description>The interface for manipulating build properties and events.</Description>
    </File>
    <File>
      <Name>VsPackage\BuildManager.cs</Name>
      <Description>
        An IBuildManager implementation.  Most of the methods in this class can operate only on
        MSBuild-based projects.  This is where the build task and the imported targets file it 
        references are created.
      </Description>
    </File>
    <File>
      <Name>VsPackage\IIgnoreInstance.cs</Name>
      <Description>The interface for a specific instance of a term that will be hidden in the Task List.</Description>
    </File>
    <File>
      <Name>VsPackage\IgnoreInstance.cs</Name>
      <Description>
        An IIgnoreInstance implementation.  This class can serialize and deserialize itself to and from a
        string, so that it can be stored as an attribute on the build task.
      </Description>
    </File>
    <File>
      <Name>VsPackage\CollectionWithEvents.cs</Name>
      <Description>An ICollection implementation that fires events when it is modified.</Description>
    </File>
    <File>
      <Name>VsPackage\IConfigurationDialog.cs</Name>
      <Description>The interface for the dialog box in which the user can set the CodeSweep configuration options.</Description>
    </File>
    <File>
      <Name>VsPackage\ConfigDialog.cs</Name>
      <Description>
        An IConfigurationDialog implementation.  This dialog box can be used to edit the configurations of
        multiple projects simultaneously, but only if the existing configurations are identical. Otherwise
        an error message is displayed.  An owner-drawn list box is used to display the term table paths.
      </Description>
    </File>
    <File>
      <Name>VsPackage\IProjectConfigurationStore.cs</Name>
      <Description>The interface for getting and setting configuration information on a per-project basis.</Description>
    </File>
    <File>
      <Name>VsPackage\ProjectConfigStore.cs</Name>
      <Description>
        An IProjectConfigurationStore implementation that operates on MSBuild-based projects and
        uses IBuildManager to manipulate the project file.
      </Description>
    </File>
    <File>
      <Name>VsPackage\NonMSBuildProjectConfigStore.cs</Name>
      <Description>
        An IProjectConfigurationStore implementation that operates on non-MSBuild projects (such as
        VC projects) and uses the DTE's Project.Globals collection to store the configuration.
      </Description>
    </File>
    <File>
      <Name>VsPackage\ITaskProvider.cs</Name>
      <Description>The interface for the custom task provider.</Description>
    </File>
    <File>
      <Name>VsPackage\TaskProvider.cs</Name>
      <Description>
        An ITaskProvider implementation.  This task provider has a custom set of columns as well as
        a custom toolbar and shortcut menu entries.  It handles commands to ignore or stop ignoring
        one or more results, as well as a toggle to show or hide ignored instances.
      </Description>
    </File>
    <File>
      <Name>VsPackage\Task.cs</Name>
      <Description>
        Task implementation for tasks provided by our custom provider.  In addition to the IVsTaskProvider
        and IVsTaskProvider3 implementations, this includes an Ignored property, which sets whether this
        instance should be considered "ignored".  The value of that property is stored in the project
        file.  This class uses the TVT_LINKTEXT task value type to display hyperlinks in the "Comment"
        field as underlined clickable links.
      </Description>
    </File>
    <File>
      <Name>VsPackage\TaskEnumerator.cs</Name>
      <Description>Enumerates a collection of tasks.</Description>
    </File>
    <File>
      <Name>VsPackage\Factory.cs</Name>
      <Description>A static class that can create instances of the interfaces in this project.</Description>
    </File>
    <File>
      <Name>VsPackage\ProjectUtilities.cs</Name>
      <Description>Project-related utility methods.</Description>
    </File>
    <File>
      <Name>VsPackage\ScannerHost.cs</Name>
      <Description>
        An implementation of CodeSweep.BuildTask.IScannerHost, which publishes results to the
        Task List as they are received.
      </Description>
    </File>
    <File>
      <Name>VsPackage\VsPkg.cs</Name>
      <Description>The main VS package implementation. Handles setup and teardown, and some commands.</Description>
    </File>
    <File>
      <Name>VsPackage\Guids.cs</Name>
      <Description>The GUIDs for the command groups defined by this package.</Description>
    </File>
    <File>
      <Name>VsPackage\PkgCmdID.cs</Name>
      <Description>The IDs of the commands defined by this package.</Description>
    </File>
    <File>
      <Name>VsPackage\ResourcesId.cs</Name>
      <Description>The IDs of string resources defined in the satellite DLL.</Description>
    </File>
    <File>
      <Name>VsPackage\extensions.xml</Name>
      <Description> The default list of supported extensions. </Description>
    </File>
    <File>
      <Name>VsPackage\sample_term_table.xml</Name>
      <Description>A sample term table.</Description>
    </File>
    <File>
      <Name>VsPackageUI\Guids.h</Name>
      <Description>The GUIDs for the command groups defined by this package.</Description>
    </File>
    <File>
      <Name>VsPackageUI\PkgCmdID.h</Name>
      <Description>The IDs of the commands defined by this package.</Description>
    </File>
    <File>
      <Name>VsPackageUI\Resource.h</Name>
      <Description>Miscellaneous resources for this package.</Description>
    </File>
    <File>
      <Name>VsPackageUI\Images_24bit.bmp</Name>
      <Description>The 24-bit version of the image strip for CodeSweep.</Description>
    </File>
    <File>
      <Name>VsPackageUI\Images_32bit.bmp</Name>
      <Description>The 32-bit version of the image strip for CodeSweep.</Description>
    </File>
    <File>
      <Name>VsPackageUI\Package.ico</Name>
      <Description>The package icon.</Description>
    </File>
    <File>
      <Name>VsPackageUI\PkgCmd.vsct</Name>
      <Description>The VSCT file defining the commands and their placements.</Description>
    </File>
    <File>
      <Name>VsPackageUI\VsPackageUI.rc</Name>
      <Description>Miscellaneous native resources.</Description>
    </File>
  </ProjectFiles>
  <History>
    <Change>
      <Date>2005-09-26</Date>
      <Description>Created this sample for the Visual Studio 2005 SDK.</Description>
    </Change>
  </History>
</VSSDKSample>
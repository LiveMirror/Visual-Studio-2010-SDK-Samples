//******************************************************************
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// This code is licensed under the Visual Studio SDK license terms.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//******************************************************************
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.SlideShowDesigner
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SlideShowDesigner.ExampleModelHasElements.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SlideShowDesigner.ExampleModelHasElements.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5e1b2d04-d152-4e0a-95b2-2579ee0967f9")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5e1b2d04, 0xd152, 0x4e0a, 0x95, 0xb2, 0x25, 0x79, 0xee, 0x09, 0x67, 0xf9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given ExampleModel
		/// </summary>
		/// <param name="source">ExampleModel to use as the source of the relationship.</param>
		/// <param name="target">Photo to use as the target of the relationship.</param>
		public ExampleModelHasElements(ExampleModel source, Photo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ExampleModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ExampleModel domain role code
		
		/// <summary>
		/// ExampleModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExampleModelDomainRoleId = new global::System.Guid(0x24958c4e, 0x328a, 0x4255, 0x99, 0xe0, 0xba, 0x9b, 0x69, 0xd6, 0xd1, 0xef);
		
		/// <summary>
		/// DomainRole ExampleModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SlideShowDesigner.ExampleModelHasElements/ExampleModel.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SlideShowDesigner.ExampleModelHasElements/ExampleModel.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.SlideShowDesigner.ExampleModelHasElements/ExampleModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("24958c4e-328a-4255-99e0-ba9b69d6d1ef")]
		public virtual ExampleModel ExampleModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExampleModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExampleModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExampleModel of a Photo
		/// <summary>
		/// Gets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ExampleModel GetExampleModel(Photo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as ExampleModel;
		}
		
		/// <summary>
		/// Sets ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetExampleModel(Photo element, ExampleModel newExampleModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newExampleModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x44ef65b7, 0xfc9a, 0x4203, 0x94, 0x57, 0x16, 0x7e, 0x4d, 0x47, 0x8f, 0x9b);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SlideShowDesigner.ExampleModelHasElements/Element.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SlideShowDesigner.ExampleModelHasElements/Element.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ExampleModel", PropertyDisplayNameKey="Company.SlideShowDesigner.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("44ef65b7-fc9a-4203-9457-167e4d478f9b")]
		public virtual Photo Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Photo)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a ExampleModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Photo> GetElements(ExampleModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Photo>, Photo>(element, ExampleModelDomainRoleId);
		}
		#endregion
		#region ExampleModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a ExampleModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SlideShowDesigner.ExampleModelHasElements> GetLinksToElements ( global::Company.SlideShowDesigner.ExampleModel exampleModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.ExampleModelHasElements>(exampleModelInstance, global::Company.SlideShowDesigner.ExampleModelHasElements.ExampleModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SlideShowDesigner.ExampleModelHasElements GetLinkToExampleModel (global::Company.SlideShowDesigner.Photo elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.SlideShowDesigner.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.ExampleModelHasElements>(elementInstance, global::Company.SlideShowDesigner.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given ExampleModel and a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SlideShowDesigner.ExampleModelHasElements> GetLinks( global::Company.SlideShowDesigner.ExampleModel source, global::Company.SlideShowDesigner.Photo target )
		{
			global::System.Collections.Generic.List<global::Company.SlideShowDesigner.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.SlideShowDesigner.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.SlideShowDesigner.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.ExampleModelHasElements>(source, global::Company.SlideShowDesigner.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.SlideShowDesigner.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given ExampleModeland a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SlideShowDesigner.ExampleModelHasElements GetLink( global::Company.SlideShowDesigner.ExampleModel source, global::Company.SlideShowDesigner.Photo target )
		{
			global::System.Collections.Generic.IList<global::Company.SlideShowDesigner.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.ExampleModelHasElements>(source, global::Company.SlideShowDesigner.ExampleModelHasElements.ExampleModelDomainRoleId);
			foreach ( global::Company.SlideShowDesigner.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.SlideShowDesigner
{
	/// <summary>
	/// DomainRelationship PhotoReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.SlideShowDesigner.PhotoReferencesTargets.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.SlideShowDesigner.PhotoReferencesTargets.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bc01f84f-c65c-4bfa-b5fb-1f71459e1532")]
	public partial class PhotoReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PhotoReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc01f84f, 0xc65c, 0x4bfa, 0xb5, 0xfb, 0x1f, 0x71, 0x45, 0x9e, 0x15, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PhotoReferencesTargets link in the same Partition as the given Photo
		/// </summary>
		/// <param name="source">Photo to use as the source of the relationship.</param>
		/// <param name="target">Photo to use as the target of the relationship.</param>
		public PhotoReferencesTargets(Photo source, Photo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PhotoReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(PhotoReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PhotoReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PhotoReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PhotoReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PhotoReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x1880609d, 0x9384, 0x42b9, 0x80, 0x20, 0x89, 0xcf, 0xd9, 0x7a, 0x5b, 0xc2);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.SlideShowDesigner.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SlideShowDesigner.PhotoReferencesTargets/Source.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SlideShowDesigner.PhotoReferencesTargets/Source.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.SlideShowDesigner.PhotoReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1880609d-9384-42b9-8020-89cfd97a5bc2")]
		public virtual Photo Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Photo)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Photo
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Photo> GetSources(Photo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Photo>, Photo>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x1fc535ee, 0x738c, 0x4915, 0x80, 0x35, 0x04, 0xff, 0xa7, 0x74, 0xda, 0x00);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.SlideShowDesigner.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.SlideShowDesigner.PhotoReferencesTargets/Target.DisplayName", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.SlideShowDesigner.PhotoReferencesTargets/Target.Description", typeof(global::Company.SlideShowDesigner.SlideShowDesignerDomainModel), "PhotoStudio.SlideShowDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.SlideShowDesigner.PhotoReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1fc535ee-738c-4915-8035-04ffa774da00")]
		public virtual Photo Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Photo)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Photo
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Photo> GetTargets(Photo element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Photo>, Photo>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of PhotoReferencesTargets links to a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SlideShowDesigner.PhotoReferencesTargets> GetLinksToTargets ( global::Company.SlideShowDesigner.Photo sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.PhotoReferencesTargets>(sourceInstance, global::Company.SlideShowDesigner.PhotoReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of PhotoReferencesTargets links to a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SlideShowDesigner.PhotoReferencesTargets> GetLinksToSources ( global::Company.SlideShowDesigner.Photo targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.PhotoReferencesTargets>(targetInstance, global::Company.SlideShowDesigner.PhotoReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region PhotoReferencesTargets instance accessors
		
		/// <summary>
		/// Get any PhotoReferencesTargets links between a given Photo and a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.SlideShowDesigner.PhotoReferencesTargets> GetLinks( global::Company.SlideShowDesigner.Photo source, global::Company.SlideShowDesigner.Photo target )
		{
			global::System.Collections.Generic.List<global::Company.SlideShowDesigner.PhotoReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.SlideShowDesigner.PhotoReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.SlideShowDesigner.PhotoReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.PhotoReferencesTargets>(source, global::Company.SlideShowDesigner.PhotoReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.SlideShowDesigner.PhotoReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PhotoReferencesTargets link between a given Photoand a Photo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.SlideShowDesigner.PhotoReferencesTargets GetLink( global::Company.SlideShowDesigner.Photo source, global::Company.SlideShowDesigner.Photo target )
		{
			global::System.Collections.Generic.IList<global::Company.SlideShowDesigner.PhotoReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.SlideShowDesigner.PhotoReferencesTargets>(source, global::Company.SlideShowDesigner.PhotoReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.SlideShowDesigner.PhotoReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}

<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- 
  ***************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    This code is licensed under the Visual Studio SDK license terms.
    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
  ***************************************************************************
  -->

  <!-- 
  This is the file that defines the actual layout and type of the commands.
  It is divided in different sections (e.g. command definition, command
  placement, ...), with each defining a specific set of properties.
  See the comment before each section or the VSCT schema for more details 
  about how to use it.
  -->

  <!--
  The VSCT compiler (the tool that translates this file into the binary format
  that VisualStudio will consume) has the ability to import external files with
  definition of constants that can be used inside the definition of your command.
  The way to include these files is to add an "Extern" tag to your VSCT file and
  specify the name of the file to reference inside the href attribute.
  Using this ability of the compiler here, we include some files defining some
  of the constants that we will use inside the file.
  -->

  <!--This is the file that defines the IDs for all the commands exposed by VisualStudio.-->
  <Extern href="stdidcmd.h" />

  <!--This header contains the command ids for the menus provided by the shell.-->
  <Extern href="vsshlids.h"/>

  <!--Definition of some VSCT specific constants. In this sample we use it for the IDs
      inside the guidOfficeIcon group.-->
  <Extern href="msobtnid.h"/>

  <!--This is the file with the definition of the Guids specific for this sample.-->
  <Extern href="Guids.h"/>

  <!--Definition of the IDs of the commands and VSCT elements specific for this sample.-->
  <Extern href="CommandIds.h"/>

  <!--Definition of the resources exposed by this package. Here it is used for the ID of the bitmap.-->
  <Extern href="Resource.h"/>

  <!--
  The first section of this file is the Commands section. This is where we define
  the commands, menus and menu groups. This section uses a Guid to identify the
  package that provides the command defined inside it.
  -->
  <Commands package="guidMenuAndCommandsPkg">
    <!--
    Inside this section we have different sub-sections: one for the menus, another
    for the menu groups, one for the buttons (the actual commands), one for the combos
    and the last one for the bitmaps used. Each element is identified by a command id that
    is a unique pair of guid and numeric identifier; the guid part of the identifier is usually
    called "command set" and is used to group different command inside a logically related
    group; your package should define its own command set in order to avoid collisions
    with command ids defined by other packages.
    In the VSCT syntax you have to specify this unique identifier using two required attributes:
    the guid attribute for the command set and the id attribute for the numeric part.
    -->

    <!-- This is the sub-section that defines the menus and toolbars. -->
    <Menus>
      <!--
      To define a menu element we need an ID, a parent group, a display priority,
      a menu type, a name and a default text.
      In this example we define a toolbar, so we set the type attribute to Toolbar; also notice 
      that we use the menu as parent for itself because this it is not supposed to have any parent.
      -->
      <Menu guid="guidMenuAndCommandsCmdSet" id="MyToolbar" priority="0x100" type="Toolbar">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyToolbar"/>
        <Strings>
          <!--
          The String section contains the localizable strings for an element, in this case our
          menu. In this example we are defining a not localizable set of commands, so we do not
          specify the "language" attribute for the String tag. It is possible however to specify
          different String sections inside any element definition, one for each supported language.
          -->
          <ButtonText>C++ Sample Toolbar</ButtonText>
        </Strings>
      </Menu>
    </Menus>
    <!--
      In this section we define new menu groups. A menu group is a container for other menus or
      buttons (commands); from a visual point of view you can see the group as the part of a menu
      contained between two lines. The parent of a group must be a menu.
    -->
    <Groups>
      <!--
      To define a menu group we have to specify its ID, the parent menu and its display priority.
      In this case we use as parent menu the Tools menu of VS; its ID is defined in vsshlids.h.
      -->
      <Group guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup" priority="0x600">
        <Parent guid="guidSHLMainMenu" id="IDM_VS_MENU_TOOLS"/>
      </Group>
      <!--
      The second group is created inside the main toolbar of VisualStudio. Again, you can find
      the ID inside vsshlids.h.
      -->
      <Group guid="guidMenuAndCommandsCmdSet" id="MyMainToolbarGroup" priority="0x100">
        <Parent guid="guidSHLMainMenu" id="IDM_VS_TOOL_STANDARD"/>
      </Group>
      <!--
      Here we create a menu group for the toolbar defined above in the Menus section. We always
      need a menu group because this is the only possible container for buttons.
      -->
      <Group guid="guidMenuAndCommandsCmdSet" id="MyToolbarGroup" priority="0x100">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyToolbar"/>
      </Group>

      <!--
      Now create a new group inside the standard editor's context menu. As always the ID of this
      menu is defined inside vsshlids.h.
      -->
      <Group guid="guidMenuAndCommandsCmdSet" id="MyEditorCtxGroup" priority="0x600">
        <Parent guid="guidSHLMainMenu" id="IDM_VS_CTXT_CODEWIN"/>
      </Group>
    </Groups>

    <!--
    This section defines the elements the user can interact with, like a menu command or a button
    or combo box in a toolbar.
    -->
    <Buttons>
      <!--
      An element inside this section is defined by its ID and must specify a parent group, a display
      priority, an image, a type, some visibility flags (optional) and a default text.
      -->
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidMyCommand" priority="0x100" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup"/>
        <Icon guid="guidGenericCmdBmp" id="bmpArrow"/>
        <Strings>
          <ButtonText>C++ Command Sample</ButtonText>
        </Strings>
      </Button>

      <!--
      Here there is the definition of the commands placed inside the toolbars. Notice that there is
      no difference between these toolbar button definitions and the menu item definition above.
      -->
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidMyGraph" priority="0x100" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMainToolbarGroup"/>
        <Icon guid="guidOfficeIcon" id="msotcidGraph"/>
        <Strings>
          <ButtonText>C++ Sample Graph Command</ButtonText>
        </Strings>
      </Button>
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidMyZoom" priority="0x100" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyToolbarGroup"/>
        <Icon guid="guidOfficeIcon" id="msotcidZoom"/>
        <Strings>
          <ButtonText>C++ Sample Zoom Command</ButtonText>
        </Strings>
      </Button>
      <!--
      Now we define a menu item with dynamic text. From the VSCT point of view all we have to do is to add a
      "CommandFlag" section to the button definition and make sure that it contains the "TextChanges" flag; we
      still have to provide a text and it will be used as default text for the command. The "TextChanges" flag
      implies that when the package is loaded Visual Studio will ask the package for the text before display
      the command.
      -->
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidDynamicTxt" priority="0x200" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup"/>
        <CommandFlag>TextChanges</CommandFlag>
        <Strings>
          <ButtonText>C++ Text Changes</ButtonText>
        </Strings>
      </Button>
      <!--
      The following two buttons have the the DynamicVisibility flag set inside the CommandFlag section.
      When this flag is set and the package providing this command is loaded, VisualStudio will ask
      the package to find out if the command is visible or not; if the package is not loaded, then
      the command is visible only if you don't specify the DefaultInvisible flag.
      In this example, when the MenuAndCommands package is not loaded, the first command will be
      visible and the second invisible; when the package is loaded it will control the visibility.
      -->
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidDynVisibility1" priority="0x300" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup"/>
        <CommandFlag>DynamicVisibility</CommandFlag>
        <Strings>
          <ButtonText>C++ Dynamic Visibility 1</ButtonText>
        </Strings>
      </Button>
      <Button guid="guidMenuAndCommandsCmdSet" id="cmdidDynVisibility2" priority="0x300" type="Button">
        <Parent guid="guidMenuAndCommandsCmdSet" id="MyMenuGroup"/>
        <CommandFlag>DynamicVisibility</CommandFlag>
        <CommandFlag>DefaultInvisible</CommandFlag>
        <Strings>
          <ButtonText>C++ Dynamic Visibility 2</ButtonText>
        </Strings>
      </Button>
    </Buttons>
    <!--
    The bitmaps section is used to define the bitmaps that are used for the commands.
    -->
    <Bitmaps>
      <!--
      The Bitmap id is defined in a way that is a little bit different from the others:
      the definition must provide a GUID (guid attribute) for the bitmap strip, a resource id (resID attribute)
      of the bitmap strip containing the bitmaps and then the numeric ids of the elements used
      inside a button definition (usedList attribute). An important aspect of this declaration is that 
      the element id must be the actual index (1-based) of the bitmap inside the bitmap strip.
      In this example we have a bitmap strip with resource id 300 and that contains only one
      element; we want to define as ID for this element guidMenuAndCommandsCmdSet:bmpArrow, so we
      have to define bmpArrow as 1 and is the delaration of the bitmap:
      -->
      <Bitmap guid="guidGenericCmdBmp" href="GenericCmd.bmp" usedList="bmpArrow"/>
    </Bitmaps>
  </Commands>

  <!--
  Inside this section, we have the ability to place menu groups inside some other menu or
  menu / commands inside other groups.
  For instance, it is possible to place one of VisualStudio's menus or commands inside one of our
  groups or one of our groups inside a menu defined somewhere else.
  -->
  <CommandPlacements>
    <!--Here we place two commands inside the empty menu group we created in the Groups section.-->
    <CommandPlacement guid="guidMenuAndCommandsCmdSet" id="cmdidMyCommand" priority="0x100">
      <Parent guid="guidMenuAndCommandsCmdSet" id="MyEditorCtxGroup"/>
    </CommandPlacement>
    <CommandPlacement guid="guidMenuAndCommandsCmdSet" id="cmdidMyZoom" priority="0x200">
      <Parent guid="guidMenuAndCommandsCmdSet" id="MyEditorCtxGroup"/>
    </CommandPlacement>

    <!--Now we place a previously defined group inside the Solution Explorer's toolbar.-->
    <CommandPlacement guid="guidMenuAndCommandsCmdSet" id="MyToolbarGroup" priority="0x600">
      <Parent guid="guidSHLMainMenu" id="IDM_VS_TOOL_PROJWIN"/>
    </CommandPlacement>
  </CommandPlacements>

  <!--This section is where you can associate a command with a keyboard shortcut; this association is
  valid within a specific UI context, that is when the shell is inside a specific mode, e.g. during
  debugging, editing a file or when the user is using a specific designer.-->
  <KeyBindings>
    <!--
    To define a binding, we have to specify the sequence of keys to press to activate the command (keystate).
    A key binding can use one or two key and optionlly up to two modifiers (Alt, Control or Shift keys); the
    keys are specified using the key1 and key2 attributes (key2 can be omitted) and the modifiers using the
    mod1 and mod2 attributes (both optional).
    The editor attribute is used to specify the UI context that activates the key binding.

    Notice that Visual Studio has a lot of components and commands, so it can be difficult to find a
    key binding not used by somebody else; if the key bindings are conflicting only one will be used
    and one problem is that the shell will not inform the user that a conflict was found. The only
    way to detect the problem is to start Visual Studio under debugger, try to execute any command
    and look if there is a message in the output window about a duplicated accelerator found.
    -->

    <!--
    In this example we want to use the <Control><2> accelerator for the first command defined in
    the Buttons section above, so this is its definition:
    -->
    <KeyBinding guid="guidMenuAndCommandsCmdSet" id="cmdidMyCommand" editor="guidVSStd97" key1="2" mod1="Control"/>
  </KeyBindings>
</CommandTable>
